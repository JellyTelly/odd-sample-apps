// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
enum OddServerMode : NSInteger;
@class NSError;


/// Handles http requests for the API server. Parses reponses or errors returning the appropriate JSON or server error information
SWIFT_CLASS("_TtC6OddSDK10APIService")
@interface APIService : NSObject
@property (nonatomic) enum OddServerMode serverMode;

/// The device/organization specific authorization token as provided by Odd must be set before the API can be accessed successfully.
@property (nonatomic, copy) NSString * _Nonnull authToken;

/// Performs a GET request on the API Server
///
/// See also: <code>APICallback
/// </code>
///
/// \param params an optional <code>Dictionary
/// </code> containing any parameters required for the request
///
/// \param url a <code>String
/// </code> containing the route for the API method to be requested
///
/// \param callbck an <code>APICallback
/// </code> that will either contain the json of the
/// requested object or an error if the request failed
- (void)get:(NSDictionary<NSString *, NSString *> * _Nullable)params url:(NSString * _Nonnull)url callback:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))callback;

/// Performs a POST request on the API Server
///
/// See also: <code>APICallback
/// </code>
///
/// \param params an optional <code>Dictionary
/// </code> containing any parameters required for the request
///
/// \param url a <code>String
/// </code> containing the route for the API method to be requested
///
/// \param callbck an <code>APICallback
/// </code> that will either contain the json of the
/// requested object or an error if the request failed
- (void)post:(NSDictionary<NSString *, id> * _Nullable)params url:(NSString * _Nonnull)url callback:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))callback;

/// Performs a PUT request on the API Server
///
/// See also: <code>APICallback
/// </code>
///
/// \param params an optional <code>Dictionary
/// </code> containing any parameters required for the request
///
/// \param url a <code>String
/// </code> containing the route for the API method to be requested
///
/// \param callbck an <code>APICallback
/// </code> that will either contain the json of the
/// requested object or an error if the request failed
- (void)put:(NSDictionary<NSString *, NSString *> * _Nullable)params url:(NSString * _Nonnull)url callback:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))callback;

/// Performs a DELETE request on the API Server
///
/// See also: <code>APICallback
/// </code>
///
/// \param params an optional <code>Dictionary
/// </code> containing any parameters required for the request
///
/// \param url a <code>String
/// </code> containing the route for the API method to be requested
///
/// \param callbck an <code>APICallback
/// </code> that will either contain the json of the
/// requested object or an error if the request failed
- (void)delete:(NSDictionary<NSString *, NSString *> * _Nullable)params url:(NSString * _Nonnull)url callback:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))callback;
@end


@interface NSDate (SWIFT_EXTENSION(OddSDK))
@end


@interface NSObject (SWIFT_EXTENSION(OddSDK))
@end


@interface NSURL (SWIFT_EXTENSION(OddSDK))
@end

@class NSCoder;
@class UIImage;
enum OddMediaObjectType : NSInteger;


/// The root object class for all media object types
///
/// Provides instance variables for common fields
SWIFT_CLASS("_TtC6OddSDK14OddMediaObject")
@interface OddMediaObject : NSObject <NSCoding>

/// The id of the media object in the database
@property (nonatomic, copy) NSString * _Nullable id;

/// The id of the OddMediaObject to report to certain advertising platforms
@property (nonatomic, copy) NSString * _Nullable assetId;

/// Is the user able to access this content (i.e. authorization/entitlement)
///
/// Note, content is publicly accessible by default. Client applications must
/// implement methods to check for authorization and set accordingly
@property (nonatomic) BOOL accessible;

/// The content rating of the asset for parental control, etc
@property (nonatomic, copy) NSString * _Nullable contentRating;

/// Information about the media object. This field is known as description on the server NSObject reserves the description keyword
@property (nonatomic, copy) NSString * _Nullable notes;

/// The title of the media object
@property (nonatomic, copy) NSString * _Nullable title;

/// The subtitle for the media object
@property (nonatomic, copy) NSString * _Nullable subtitle;

/// The URL string to load the asset from the content provider
@property (nonatomic, copy) NSString * _Nullable urlString;

/// A URL string to load this media object via API
@property (nonatomic, copy) NSString * _Nullable link;

/// A URL string to a thumbnail image to be used in conjunction with the media object
@property (nonatomic, copy) NSString * _Nullable thumbnailLink;

/// A customizable URL string that enables formatting on the thumbnailLink
@property (nonatomic, copy) NSString * _Nullable formattedThumbnailLink;

/// The date the content was released
@property (nonatomic, copy) NSString * _Nullable releaseDate;

/// The date the media object was downloaded to the device
@property (nonatomic, strong) NSDate * _Nullable downloadDate;

/// A placeholder string for the title
@property (nonatomic, copy) NSString * _Nonnull defaultTitle;

/// A placeholder string for the media objects notes
@property (nonatomic, copy) NSString * _Nonnull defaultSubtitle;

/// Customer specific information A customer may require data that only their application can make use of. In these cases this information is passed along in json format under the meta tag. The individual fields of the meta section are not accessible directly via this API. It is the application developers responsibitly to parse this additional data
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nullable meta;

/// When was this object last updated from the server
@property (nonatomic, strong) NSDate * _Nonnull lastUpdate;
@property (nonatomic, readonly) BOOL cacheHasExpired;

/// Given the json for the object type parses the data and sets the instance variables as appropriate
///
/// \param json A <code>jsonObject
/// </code> containing the data for this media object
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder;

/// Helper method to provide the media objects duration as a String
///
/// returns: A <code>String
/// </code> representation of the objects duration
- (NSString * _Nonnull)durationAsTimeString;

/// Loads the media objects thumbnail image asset
///
/// Checks if the <code>_thumbnail
/// </code> asset is already present returning it if so.
///
/// If the asset is not already loaded the asset is fetched and upon success the
/// callback closure is executed with the image as a parameter
///
/// parameter callback: A closure taking a <code>UIImage
/// </code> as a parameter to be executed when the image is loaded
- (void)thumbnail:(void (^ _Nonnull)(UIImage * _Nullable))callback;

/// Convenience method to retun all keys in the mediaObjects meta dictionary
- (NSSet<NSString *> * _Nullable)metaKeys;

/// Convenience method to return a given keys value or nil if it is not found
- (id _Nullable)valueForMetaKey:(NSString * _Nonnull)key;

/// Convenience method to retun all keys in the mediaObjects meta dictionary
- (NSSet<NSString *> * _Nullable)relationshipNodeNames;
- (NSInteger)numberOfItemsInRelationshipNodeWithName:(NSString * _Nonnull)name;
- (BOOL)objectIsOfType:(enum OddMediaObjectType)type;
@end


SWIFT_CLASS("_TtC6OddSDK10OddArticle")
@interface OddArticle : OddMediaObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6OddSDK9OddConfig")
@interface OddConfig : NSObject

/// Convenience method to retun all view names in the views dictionary
- (NSSet<NSString *> * _Nullable)viewNames;

/// Convenience method to return a given views id or nil if it is not found
- (NSString * _Nullable)idForViewName:(NSString * _Nonnull)viewName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A class to encapsulate common globally required values such as notification names
SWIFT_CLASS("_TtC6OddSDK12OddConstants")
@interface OddConstants : NSObject

/// The notification posted by the OddContentStore when there is an error fetching the app config
+ (NSString * _Nonnull)OddErrorFetchingConfigNotification;

/// The notification posted by the OddContentStore when the OddConfig has been successfully fetched from the server
+ (NSString * _Nonnull)OddFetchedConfigNotification;

/// The notification posted by the OddContentStore when there is an error fetching a view
+ (NSString * _Nonnull)OddErrorFetchingViewNotification;

/// The notification posted by the OddContentStore when there is an error fetching the main/home view information
+ (NSString * _Nonnull)OddErrorFetchingHomeViewNotification;

/// The notification posted by the OddContentStore when there is an error fetching the menu view information
+ (NSString * _Nonnull)OddErrorFetchingMenuViewNotification;

/// The notification posted by the OddContentStore when it has completed loading and parsing all required data for the home view
+ (NSString * _Nonnull)OddContentStoreCompletedInitialLoadNotification;

/// The notification posted by the OddContentStore after it has loaded the featured media object
+ (NSString * _Nonnull)OddFeaturedMediaObjectLoadedNotification;

/// The notification posted by the OddContentStore after the featured collections have been loaded
+ (NSString * _Nonnull)OddFeaturedCollectionsLoadedNotification;

/// The notification posted by the OddContentStore after the featured promotion has been loaded
+ (NSString * _Nonnull)OddFeaturedPromotionLoadedNotification;

/// The notification posted by the OddContentStore after the included entities for the menu have been loaded and parsed
+ (NSString * _Nonnull)OddIncludedMediaItemsLoadedNotification;
+ (NSString * _Nonnull)OddStartedSearchNotification;
+ (NSString * _Nonnull)OddAuthenticationStateChangedNotification;
+ (NSString * _Nonnull)OddAuthenticationErrorCheckingStateNotification;
+ (NSString * _Nonnull)OddConnectionOfflineNotification;
+ (NSString * _Nonnull)OddImageLoadDidFail;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class OddEvent;
@class OddExternal;
@class OddVideo;
@class OddMediaObjectCollection;


/// Class to load and store the various OddMediaObject types Applications should only maintain one instance of the content store and access that instance through the sharedStore() instance variable
///
/// <h3>Concepts</h3>
/// <h4>Media Objects</h4>
/// All objects stored in the Content Store are <code>OddMediaObjects
/// </code>
/// Typically only subclasses of <code>OddMediaObject
/// </code> are used in client applications.
///
/// In order to have a dynamic system for handling views all
/// stored objects descend from <code>OddMediaObject
/// </code> This allows
/// a viewController to display a collection of media objects
/// while querying the objects themselves for informaton such
/// as how to render in a <code>tableviewcell
/// </code> or what action to
/// perform when that object is selected
///
/// Refer to <code>OddMediaObject
/// </code>, <code>OddVideo
/// </code>, <code>OddMediaObjectCollection
/// </code>
/// for more information
///
/// <h4>Views</h4>
/// In the world of the <code>OddContentStore
/// </code> a view is a collection
/// of <code>OddMediaObjects
/// </code> to be displayed together in a client app
///
/// For example the <code>initialize()
/// </code> method will load the apps configuration
/// and then fetch the 'home' view. This 'home' view will be the
/// collection of media objects the customer has selected to be displayed
/// first to the user. Any view may have related objects, objects linked to
/// from that view, that may also be included in the view reponse from the server
/// when related items are found for a view the content store will fetch those items
/// and store them for use when needed.
///
/// A view may contain one or more <code>OddMediaObjects
/// </code> from a single <code>OddVideo
/// </code> to
/// mulitple <code>OddMediaObjectCollections
/// </code> with many levels of nested media objects
///
/// <h4>Collections</h4>
/// Collections typically of the type <code>OddMediaObjectCollection
/// </code> are
/// groups of <code>OddMediaObjects
/// </code> The collection in addition to holding
/// and <code>Array
/// </code> of the objects will also have information useful for
/// presenting the collection to the user via the UI.
///
/// Collections can contain any type of media object or may be typed
/// to contain only specific object types. Currently there is only support
/// for generic collections, <code>OddArticle
/// </code> or <code>OddEvent
/// </code> typed collections
/// See <code>OddMediaObjectCollectionType
/// </code> enum defined in <code>OddMediaObjectCollection
/// </code>
///
/// Refer to <code>OddMediaObjectCollection
/// </code> for more information
///
/// <h4>Featured Items</h4>
/// A client will have many <code>OddMediaObjects
/// </code> in its library but
/// certain media objects will be <code>Featured.
/// </code> When an object is
/// <code>Featured
/// </code> this is an indication that the client app should
/// display this content in a prominent location or way.
///
/// For example featured content would be displayed on the first
/// screen visible when the app launches
SWIFT_CLASS("_TtC6OddSDK15OddContentStore")
@interface OddContentStore : NSObject

/// A singleton instance of the OddContentStore in order to keep only one instance of the content library loaded all access to the media objects should be made through this singleton instance
+ (OddContentStore * _Nonnull)sharedStore;

/// The master collection of OddMediaObjects any object loaded from the server is stored in this Set
@property (nonatomic, copy) NSSet<OddMediaObject *> * _Nonnull mediaObjects;

/// A singleton instance of our API client used to communicate with the server and parse responses and/or errors publicly accessible via the SDK. Client applications will need to set the authToken instance variable on API before using the SDK
@property (nonatomic, strong) APIService * _Nonnull API;

/// The applications configurable settings as loaded from the server
@property (nonatomic, strong) OddConfig * _Nullable config;

/// Determines whether objects in the object store can expire based on a cache time to live set via HTTP header from server responses
@property (nonatomic) BOOL useCacheTTL;
@property (nonatomic, readonly, copy) NSArray<OddArticle *> * _Nullable articles;
@property (nonatomic, readonly, copy) NSArray<OddEvent *> * _Nullable events;
@property (nonatomic, readonly, copy) NSArray<OddExternal *> * _Nullable externals;
@property (nonatomic, readonly, copy) NSArray<OddMediaObject *> * _Nullable menuItems;

/// Initializes the content store. If the config is successfully loaded upon completion the OddContentStore instance will contain an instance of OddConfig. Initialize will call back the closure passed with the success and/or any error encountered during the loading of the config
- (void)initialize:(void (^ _Nonnull)(BOOL, NSError * _Nullable))success;
- (void)resetStore;

/// Locates media objects by type and id
///
/// Note: Objects are first looked for in the local cache (<code>mediaObjects
/// </code>) if no matching object is
/// found in the cache the server will be polled for a matching object. If no objects
/// are found an empty <code>array
/// </code> is returned
///
/// \param type String the media object type to find
///
/// \param ids Ids of the object(s) to be found
///
/// \param callback <code>(Array<AnyObject>) -> Void
/// </code> a callback executed once the search is complete
/// The <code>Array
/// </code> passed to <code>callback
/// </code> will either contain the entities matching the query or be empty
/// if no entities were found
- (void)objectsOfType:(enum OddMediaObjectType)type ids:(NSArray<NSString *> * _Nonnull)ids include:(NSString * _Nullable)include callback:(void (^ _Nonnull)(NSArray<OddMediaObject *> * _Nonnull, NSArray<NSError *> * _Nullable))callback;

/// Calls the API server to locate media objects of a type with a given id
///
/// \param type String the media object type as defined on the server
/// ("video" or "collection") are the currently supported types
///
/// \param id <code>Array<String>
/// </code> the id of the entity to be fetched
///
/// \param callback <code>( Array<OddMediaObject> ) -> Void
/// </code> a callback executed once the search is complete
/// The array passed to <code>callback
/// </code> will either contain the entities matching the query or be empty
/// if no entities wer found
- (void)fetchObjectsOfType:(enum OddMediaObjectType)type ids:(NSArray<NSString *> * _Nonnull)ids include:(NSString * _Nullable)include callback:(void (^ _Nonnull)(NSArray<OddMediaObject *> * _Nonnull, NSArray<NSError *> * _Nullable))callback;

/// Calls the API server to locate a single media object of a type with a given id
///
/// Note: the return type of <code>AnyObject?
/// </code> will be changing to <code>OddMediaObject?
/// </code> in a future
/// update
///
/// See also: <code>fetchObjectsOfType ( type: String, ids: Array<String>, callback: ( Array<AnyObject> ) -> Void )
/// </code>
/// to fetch multiple objects of a given type
///
/// \param type <code>String
/// </code> the media object type as defined on the server
/// ("video" or "collection") are the currently supported types
///
/// \param id <code>String
/// </code> the id of the entity to be fetched
///
/// \param callback <code>(AnyObject?) -> Void
/// </code> a callback executed once the search is complete
/// The object passed to <code>callback
/// </code> will either be the entity matching the query or be nil
/// if no entity was found
- (void)fetchObjectType:(enum OddMediaObjectType)type id:(NSString * _Nonnull)id include:(NSString * _Nullable)include callback:(void (^ _Nonnull)(OddMediaObject * _Nullable, NSError * _Nullable))callback;

/// Calls the API server to locate media objects that match the url query param
///
/// \param type String the media object type as defined on the server
/// ("video" or "collection") are the currently supported types
///
/// \param query <code>Array<String>
/// </code> the url query used to request data from the API
///
/// \param callback <code>( Array<OddMediaObject> ) -> Void
/// </code> a callback executed once the search is complete
/// The array passed to <code>callback
/// </code> will either contain the entities matching the query or be empty
/// if no entities were found
- (void)fetchObjectsWithQuery:(enum OddMediaObjectType)type query:(NSString * _Nonnull)query callback:(void (^ _Nonnull)(NSArray<OddMediaObject *> * _Nonnull, NSError * _Nullable))callback;

/// Returns the media object in the mediaStore with a specified id
///
/// Note: This method only searches the <code>mediaStore
/// </code> for cached objects
///
/// See also: <code>objectsOfType( type: String, ids : Array<String>, callback: (Array<AnyObject>) ->Void )
/// </code>
/// to search the cache and the Server
///
/// \param id <code>String
/// </code> the id of the entity to be found
///
/// \returns  <code>OddMediaObject
/// </code>? the object found or nil in none is found
- (OddMediaObject * _Nullable)mediaObjectWithId:(NSString * _Nonnull)id;

/// Returns an array of media objects in the mediaStore with a specified ids
///
/// Note: This method only searches the <code>mediaStore
/// </code> for cached objects
///
/// See also: <code>objectsOfType( type: String, ids : Array<String>, callback: (Array<AnyObject>) ->Void )
/// </code>
/// to search the cache and the Server
///
/// \param ids <code>Array<String>
/// </code> an array of ids of the entities to be found
///
/// \returns  <code>Array<OddMediaObject>
/// </code>? the objects found or nil in none are found
- (NSArray<OddMediaObject *> * _Nullable)mediaObjectsWithIds:(NSArray<NSString *> * _Nonnull)ids;
- (void)searchForTerm:(NSString * _Nonnull)term onResults:(void (^ _Nonnull)(NSArray<OddVideo *> * _Nullable, NSArray<OddMediaObjectCollection *> * _Nullable))onResults;

/// A helper method to provide information about the media objects currently in the mediaStore
///
/// Example:
///
/// <code>    print( "\( mediaObjectInfo() )" )
/// 
/// </code>
/// displays the <code>mediaStore
/// </code> info to the console
///
/// \returns  <code>String
/// </code> a string with information about the contents of the <code>mediaStore
/// </code>
- (NSString * _Nonnull)mediaObjectInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6OddSDK8OddEvent")
@interface OddEvent : OddMediaObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6OddSDK11OddExternal")
@interface OddExternal : OddMediaObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6OddSDK13OddGateKeeper")
@interface OddGateKeeper : NSObject

/// A singleton instance of the GateKeeper class All access to the users authentication credentials should be made through this singleton instance
+ (OddGateKeeper * _Nonnull)sharedKeeper;
- (void)fetchAuthenticationConfig:(void (^ _Nonnull)(NSString * _Nullable, NSString * _Nullable, NSString * _Nullable, NSError * _Nullable))callback;
- (void)blowAwayCredentials;
- (void)fetchAuthenticationToken;
- (void)pollForAuthentication;
- (BOOL)userIsAuthenticated;

/// Convenience method to retun all keys in the entitlements credentials dictionary
- (NSSet<NSString *> * _Nullable)entitlementKeys;

/// Convenience method to return a given keys value or nil if it is not found
- (id _Nullable)valueForEntitlementKey:(NSString * _Nonnull)key;
- (NSDictionary<NSString *, id> * _Nullable)entitlementCredentials;
- (void)updateEntitlementCredentials:(NSDictionary<NSString *, id> * _Nonnull)creds;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The level of logging to be displayed on the console. Levels in order are
typedef SWIFT_ENUM(NSInteger, OddLogLevel) {
  OddLogLevelInfo = 0,
  OddLogLevelWarn = 1,
  OddLogLevelError = 2,
};


SWIFT_CLASS("_TtC6OddSDK9OddLogger")
@interface OddLogger : NSObject
+ (enum OddLogLevel)logLevel;
+ (void)setLogLevel:(enum OddLogLevel)value;
+ (void)info:(NSString * _Nonnull)message;
+ (void)warn:(NSString * _Nonnull)message;
+ (void)error:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// A media object collection is a collection of OddMediaObjects
///
/// An <code>OddMediaObjectCollection
/// </code> may hold any other <code>OddMediaObject
/// </code>s
SWIFT_CLASS("_TtC6OddSDK24OddMediaObjectCollection")
@interface OddMediaObjectCollection : OddMediaObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, OddMediaObjectType) {
  OddMediaObjectTypeView = 0,
  OddMediaObjectTypeVideo = 1,
  OddMediaObjectTypeLiveStream = 2,
  OddMediaObjectTypeCollection = 3,
  OddMediaObjectTypePromotion = 4,
  OddMediaObjectTypeArticle = 5,
  OddMediaObjectTypeEvent = 6,
  OddMediaObjectTypeExternal = 7,
};


SWIFT_CLASS("_TtC6OddSDK12OddPromotion")
@interface OddPromotion : OddMediaObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The APIService can be configured to use either the Staging or Production servers using this enum type.
///
/// See also: <code>serverMode
/// </code>
typedef SWIFT_ENUM(NSInteger, OddServerMode) {
  OddServerModeStaging = 0,
  OddServerModeProduction = 1,
  OddServerModeBeta = 2,
  OddServerModeLocal = 3,
};



/// An OddMediaObject subclass representing a video asset
SWIFT_CLASS("_TtC6OddSDK8OddVideo")
@interface OddVideo : OddMediaObject

/// Read only variable to provide the asset type
@property (nonatomic, readonly, copy) NSString * _Nonnull contentTypeString;

/// The type of player service used to play the video asset
///
/// Videos can be played with various player types. The default is the
/// native AVPlayer. Client applications must implement their own support
/// for other player types. See sample application support for Ooyala and web
/// based players
///
/// This value will be set by the API and should only be read by client apps
@property (nonatomic, readonly, copy) NSString * _Nullable playerType;

/// Used by Ooyala based video players
@property (nonatomic, copy) NSString * _Nullable pCode;

/// Used by Ooyala based video players
@property (nonatomic, copy) NSString * _Nullable embedCode;

/// Used by Ooyala based video players
@property (nonatomic, copy) NSString * _Nullable domain;

/// Used by web based video players
@property (nonatomic, copy) NSString * _Nullable playerUrlString;

/// The URL for the videos closed captioning track if provided as a separate asset
@property (nonatomic, copy) NSString * _Nullable closedCaptionsUrlString;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6OddSDK7OddView")
@interface OddView : OddMediaObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface UIApplication (SWIFT_EXTENSION(OddSDK))
@end


@interface UIViewController (SWIFT_EXTENSION(OddSDK))
@end

#pragma clang diagnostic pop
